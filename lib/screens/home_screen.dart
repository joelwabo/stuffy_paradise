import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'package:stuffy_paradise/database/sql_database_service.dart';
import 'package:stuffy_paradise/injection.dart';
import 'package:stuffy_paradise/screens/ride_widget.dart';
import 'package:flutter_state_notifier/flutter_state_notifier.dart';

import '../models/user.dart';
import '../provider/home_screen_provider.dart';
import '../provider/user_session_provider.dart';

class HomeScreen extends StatefulWidget {
  HomeScreen({Key? key}) : super(key: key);

  @override
  _HomeScreen createState() => _HomeScreen();
}

class _HomeScreen extends State<HomeScreen> {
  final HomeScreenProvider _provider = getIt();
  final UserSessionProvider session = getIt();

  @override
  Widget build(BuildContext context) {

    return Scaffold(
      appBar: AppBar(
        title: const Text('Welcome to Stuffy - Paradise'),
        actions: [
          PopupMenuButton<String>(
            icon: CircleAvatar(
              child: Text(session.currentUser?.userName[0].toUpperCase() ?? "?"),
            ),
            onSelected: (value) {
              if (value == 'logout') {
                session.logout();
                Navigator.of(context).pushReplacementNamed('/');
              }
              if (value == 'createUser') {
                _showCreateUserDialog(context); // Navigate to login screen
              }
            },
            itemBuilder: (context) => [
              PopupMenuItem(
                child: Text("Weclome: ${session.currentUser?.userName ?? ''}"),
                value: 'userInfo',
              ),
              if (session.currentUser!.isAdmin)
                const PopupMenuItem(
                  child: Text("Create user"),
                  value: 'createUser',
                ),
              PopupMenuItem(
                child: Text("Log Out"),
                value: 'logout',
              ),
            ],
          ),
        ],
      ),
      body: Padding(
        padding: const EdgeInsets.all(5),
        child: Column(
          children: [
            Expanded(
              child: Consumer<HomeScreenProvider>(
                builder: (context, provider, _) {
                  if (provider.isLoading) {
                    return const Center(
                      child: CircularProgressIndicator(),
                    );
                  }
                  return ListView.builder(
                    padding: const EdgeInsets.symmetric(vertical: 50),
                    itemCount: provider.rides.length,
                    itemBuilder: (BuildContext context, int index) {
                      return RideWidget(index);
                    },
                  );
                },
              ),
            ),
            Row(
              children: [
                IconButton(
                  icon: const Icon(Icons.add),
                  tooltip: 'Add a ride',
                  onPressed: _provider.addRide,
                ),
                Text(' Start race'),
              ],
            ),
          ],
        ),
      ),
    );
  }
}


void _showCreateUserDialog(BuildContext context) {
  final userNameController = TextEditingController();

  showDialog(
    context: context,
    builder: (BuildContext context) {
      return AlertDialog(
        title: Text('Create New User'),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            TextField(
              controller: userNameController,
              decoration: InputDecoration(labelText: 'Username'),
            ),
          ],
        ),
        actions: [
          TextButton(
            onPressed: () async {
              final userName = userNameController.text.trim();
              if (userName.isNotEmpty) {
                final password = userName; // Default password is the username
                final newUser = User(
                  id: 0,  // ID will be auto-generated by the database
                  userName: userName,
                  password: password,
                  isAdmin: false, // Admin can decide if user should be admin or not
                );
                SqlDatabaseService sqlDatabaseService = getIt();
                await sqlDatabaseService.createUser(newUser); // Create user in the database

                Navigator.pop(context); // Close the dialog
                ScaffoldMessenger.of(context).showSnackBar(
                  SnackBar(content: Text('User created successfully')),
                );
              }
            },
            child: Text('Create'),
          ),
          TextButton(
            onPressed: () {
              Navigator.pop(context); // Cancel action
            },
            child: Text('Cancel'),
          ),
        ],
      );
    },
  );
}
